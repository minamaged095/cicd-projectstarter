version: 2.1
# orbs:
#   slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   workflow_id:
    #       type: string     
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  
            #exit 1
 
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   workflow_id:
    #       type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            # Example: Memstash.io
            # Example: kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/BaBUKPcutaG5oSneVWB6z1/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            
  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   # parameters:
  #   #   - environment:
  #   #       default: "world"
  #   #       type: string 
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #    #     exit 1

jobs:


  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              # Your code here
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan fron-end
          command: |
            # Your code here
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            # Your code here
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical  
            

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cicdProject \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cicdProject \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=cicdProject" \
            --output text | tee -a .circleci/ansible/inventory.txt
      - run:
          name: cat inventory file
          command: |
            cat .circleci/ansible/inventory.txt
            cp .circleci/ansible/inventory.txt /tmp
      - persist_to_workspace:
          root: /tmp
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install aws cli
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: copy inventory
          command: |
            cp /tmp/inventory.txt .circleci/ansible/
            # echo "[web]" > .circleci/ansible/inventory.txt
            # echo "54.187.195.121" >> .circleci/ansible/inventory.txt
            # echo "54.185.238.15" >> .circleci/ansible/inventory.txt
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["9f:31:95:1b:c8:bb:fe:df:bf:d6:76:01:07:fb:ef:f1"]
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible
      - run:
          name: fix ssh issue
          command: |
            # Install Ansible

            apk add --no-cache openssh-client
      - run:
          name: fix ssh issue 2
          command: |
            echo "Host *" >> /etc/ssh/ssh_config &&\
            echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
            #ssh -o StrictHostKeyChecking=no
      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:12.22.10
    steps:
      - checkout
      - restore_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            #   rm -r node_modules
            #   rm package-lock.json
            npm install
            # npm audit fix 
            # npm audit fix --audit-level=critical --force
            # npm audit
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: | 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              #  curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/BaBUKPcutaG5oSneVWB6z1/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Install ansible
      #     command: |
      #       sudo yum -y update
      #       sudo yum install -y epel-release
      #       yum install -y ansible
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: install node and npm
          command: |
            curl -sL https://rpm.nodesource.com/setup_8.x | bash -
            yum install -y nodejs
          #  apk add --update npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=cicdProject" \
            --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # - restore_cache:
      #     keys: [backend-build]
      # - restore_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build
      - checkout
      - restore_cache:
          paths: [backend/node_modules]
          key: backend-build
      - attach_workspace:
          at: /tmp
      - run:
          name: copy inventory
          command: |
            cp /tmp/inventory.txt .circleci/ansible/
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["9f:31:95:1b:c8:bb:fe:df:bf:d6:76:01:07:fb:ef:f1"]
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible
      - run:
          name: Install aws cli
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Install node and npm
          command: |
            apk add --update nodejs npm
      - run:
          name: install tar
          command: |
            apk add --no-cache tar \
            gzip
      - run:
          name: fix ssh issue
          command: |
            apk add --no-cache openssh-client
      - run:
          name: fix ssh issue 2
          command: |
            echo "Host *" >> /etc/ssh/ssh_config &&\
            echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
            #ssh -o StrictHostKeyChecking=no
      - run:
          name: prep tar file
          command: |
            # Your command
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls
            mkdir .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  
  # fix-deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: copy inventory
  #         command: |
  #           # cp /tmp/inventory.txt .circleci/ansible/
  #           # cp /tmp/inventory.txt .circleci/ansible/
  #           echo "[web]" > .circleci/ansible/inventory.txt
  #           echo "35.89.180.109" >> .circleci/ansible/inventory.txt
  #     - add_ssh_keys:
  #             # You can get this ID in the section where you registered the SSH Key
  #         fingerprints: ["9f:31:95:1b:c8:bb:fe:df:bf:d6:76:01:07:fb:ef:f1"]
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           # Install Ansible
  #           apk add --update ansible
  #     - run:
  #         name: Install node and npm
  #         command: |
  #           apk add --update nodejs npm
  #     - run:
  #         name: install tar
  #         command: |
  #           apk add --no-cache tar \
  #           gzip
  #     - run:
  #         name: fix ssh issue
  #         command: |
  #           apk add --no-cache openssh-client
  #     - run:
  #         name: fix ssh issue 2
  #         command: |
  #           echo "Host *" >> /etc/ssh/ssh_config &&\
  #           echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
  #           #ssh -o StrictHostKeyChecking=no
  #     - run:
  #         name: prep tar file
  #         command: |
  #           # Your command
  #           cd backend
  #           npm i
  #           npm run build
  #           cd ..
  #           # Zip the directory
  #           tar -C backend -czvf artifact.tar.gz .
  #           ls
  #           mkdir .circleci/ansible/roles/deploy/files
  #           cp artifact.tar.gz .circleci/ansible/roles/deploy/files
  #     - run:
  #         name: run playbook
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: copy inventory
          command: |
            cp /tmp/inventory.txt .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add curl
            # your code here
      - run:
          name: Install aws cli
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Get backend url
          command: |
              BACKEND_IP=$(grep -m 2 -o '.*' .circleci/ansible/inventory.txt | cut -d ':' -f 1 | tail -n 1)
              echo BACKEND_IP
              # $(cat .circleci/ansible/inventory.txt)
              # echo "backend ip is  $BACKEND_IP"

              # Fetch and prepare the BACKEND_IP env var
              export API_URL="http://$BACKEND_IP:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      - destroy-environment
      - revert-migrations


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment
      - revert-migrations

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"    
      - run:
          name: Remove old stacks and files
          command: |
            # You can use any condition like:
            # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
                echo "can not cleanup"
            fi
      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
     ## - build:
     ##    context: slack-secrets
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
#       - deploy-infrastructure:
#           requires: [scan-frontend]
#  ##     - configure-infrastructure
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#  ##     - deploy-frontend
#       - deploy-frontend:
#           requires: [run-migrations]

  #     - deploy-infrastructure:
  #         requires: [build-frontend,build-backend]
  #     - configure-infrastructure:
  #         requires: [deploy-infrastructure]
  #   #  - run-migrations:
  #  #       requires: [configure-infrastructure]
  # #    - deploy-frontend:
  #  #       requires: [configure-infrastructure]
  #     - deploy-backend:
  #         requires: [configure-infrastructure]
  #   #  - run-migrations


   #   - deploy-backend:
   #       requires: [build-backend]

      # - fix-deploy-infrastructure
      # - test-deploy-infrastructure:
      #      requires: [fix-deploy-infrastructure]
      - deploy-infrastructure:
          requires: [build-frontend,build-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend,deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

      #  - smoke-test
      # - configure-infrastructure
   #   - fix-deploy-backend
      #     requires: [configure-infrastructure]